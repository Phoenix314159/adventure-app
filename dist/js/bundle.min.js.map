{"version":3,"sources":["app.js","components/map.js","services/mainService.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_config2","obj","__esModule","default","angular","config","GoogleMapApi","configure","key","api_key","v","libraries","./../../config","2","Object","defineProperty","value","component","templateUrl","controllerAs","controller","mainService","uiGmapGoogleMapApi","$timeout","vm","this","newSearch","map","setCenter","center","zoom","showMap","showLoad","menu","arr","toggleMaps","select","then","res","buildMarkerArray","buildHeatArray","initMap","coinOptions","keyOptions","cPrizeOptions","selected","getCoins","getKeys","getCPrize","coinMarkers","coinId","cPointsHeat","coinPoints","data","keyMarkers","keyId","keyPointsHeat","getKey","keyPoints","cpMarkers","cpId","cPrizePointsHeat","cPrizePoints","service","$http","heatmap","latitude","longitude","coords","scrollwheel","google","dataArr","markerArr","idArr","push","arr1","arr2","LatLng","createInfoWindow","point","InfoWindow","content","toFixed","Map","document","getElementById","lat","lng","visualization","HeatmapLayer","events","marker","eventName","model","open","options","icon","url","scaledSize","height","width","animation","Animation","DROP","title","markerEvents","click","method"],"mappings":"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","file":"bundle.min.js","sourcesContent":["import config from './../../config';\r\nangular.module('adventure', ['uiGmapgoogle-maps', 'angular-spinkit'])\r\n    .config(['uiGmapGoogleMapApiProvider', function (GoogleMapApi) {\r\n        GoogleMapApi.configure({\r\n            key: config.api_key,\r\n            v: '3.29',\r\n            libraries: 'visualization'\r\n        })\r\n    }])\r\n\r\n\r\n\r\n\r\n\r\n","angular.module('adventure').component('map', {\r\n    templateUrl: './views/map.html',\r\n    controllerAs: 'map',\r\n    controller: function (mainService, uiGmapGoogleMapApi, $timeout) {\r\n        let vm = this,\r\n            newSearch = () => {\r\n                vm.map.setCenter(mainService.map.center) // sets center of map when new search is activated\r\n                vm.map.zoom = 6 // sets zoom of map when new search is activated\r\n            }\r\n        vm.map = mainService.map // initial map to display\r\n        vm.showMap = false // heatmap is not initially shown\r\n        vm.showLoad = false // loading spinner is initially hidden\r\n        vm.menu = mainService.arr //gets select menu options from mainService\r\n        vm.toggleMaps = () => { // function to toggle between showing heat map and point map\r\n            vm.showMap = !vm.showMap\r\n            vm.select()  // initiates new API search for coordinates depending on what element is selected\r\n        }\r\n\r\n        uiGmapGoogleMapApi.then(res => { // need to wait for the google maps object to come back in mainService\r\n            let buildMarkerArray = mainService.buildMarkerArray,\r\n                buildHeatArray = mainService.buildHeatArray\r\n            vm.initMap = mainService.initMap\r\n            vm.coinOptions = mainService.coinOptions\r\n            vm.keyOptions = mainService.keyOptions\r\n            vm.cPrizeOptions = mainService.cPrizeOptions\r\n            vm.select = () => { // function to display marker type depending on selected element\r\n                switch (vm.selected) {\r\n                    case 'Coins':\r\n                        vm.getCoins()\r\n                        break\r\n                    case 'Keys':\r\n                        vm.getKeys()\r\n                        break\r\n                    case 'Cinemark Prizes':\r\n                        vm.getCPrize()\r\n                        break\r\n                }\r\n            }\r\n            vm.getCoins = () => {\r\n                vm.coinMarkers = [] // array to store marker coordinates\r\n                vm.coinId = [] // every marker needs a unique id\r\n                vm.cPointsHeat = [] // array to store heat map points\r\n                vm.showLoad = true // show loading spinner for 3 seconds\r\n                newSearch() // initiate new search\r\n                mainService.getCoins().then(res => {  // executes API call to get coin coordinate data\r\n                    vm.coinPoints = res.data // array from server containing coin coordinate data\r\n                    $timeout(() => { // show loading spinner for 2 seconds until points drop\r\n                        vm.showLoad = false\r\n                        buildMarkerArray(vm.coinPoints, vm.coinMarkers, vm.coinId) // builds array of coin coordinates\r\n                        buildHeatArray(vm.coinPoints, vm.cPointsHeat) // builds array of heat map points\r\n                        vm.initMap(vm.cPointsHeat) //initiates heat map\r\n                    }, 2000)\r\n                })\r\n            }\r\n            vm.getKeys = () => {\r\n                vm.keyMarkers = [] // array to store marker coordinates\r\n                vm.keyId = [] // every marker needs a unique id\r\n                vm.keyPointsHeat = [] // array to store heat map points\r\n                vm.showLoad = true // show loading spinner\r\n                newSearch() // initiate new search\r\n                mainService.getKey().then(res => {  // executes API call to get key coordinate data\r\n                    vm.keyPoints = res.data // array from server containing key coordinate data\r\n                    $timeout(() => { // show loading spinner for 2 seconds until points drop\r\n                        vm.showLoad = false\r\n                        buildMarkerArray(vm.keyPoints, vm.keyMarkers, vm.keyId) //calls function from api component to build array of key coordinates\r\n                        buildHeatArray(vm.keyPoints, vm.keyPointsHeat) //builds array of heat map points\r\n                        vm.initMap(vm.keyPointsHeat) //initiates heat map\r\n                    }, 2000)\r\n                })\r\n            }\r\n            vm.getCPrize = () => {\r\n                vm.cpMarkers = [] // array to store marker coordinates\r\n                vm.cpId = [] // every marker needs a unique id\r\n                vm.cPrizePointsHeat = [] //array to store heat map points\r\n                vm.showLoad = true // show loading spinner\r\n                newSearch() // initiate new search\r\n                mainService.getCPrize().then(res => { //executes API call to get cinemark prize coordinate data\r\n                    vm.cPrizePoints = res.data // array from server containing cinemark prize coordinate data\r\n                    $timeout(() => { // show loading spinner for 2 seconds until points drop\r\n                        vm.showLoad = false\r\n                        buildMarkerArray(vm.cPrizePoints, vm.cpMarkers, vm.cpId) // builds array of cinemark prize coordinates\r\n                        buildHeatArray(vm.cPrizePoints, vm.cPrizePointsHeat) //builds array of heat map points\r\n                        vm.initMap(vm.cPrizePointsHeat) //initiates heat map\r\n                    }, 2000)\r\n                })\r\n            }\r\n        })\r\n    }\r\n})\r\n","angular.module('adventure').service('mainService', function ($http, uiGmapGoogleMapApi) {\r\n    let vm = this, map, heatmap\r\n    vm.arr = ['Coins', 'Keys', 'Cinemark Prizes'] //array for ng-options to display in select menu\r\n    vm.map = {  //defines initial view of map\r\n        center: { // center of map when initially displayed\r\n            latitude: 40.233845,\r\n            longitude: -111.658531\r\n        },\r\n        setCenter: coords => {  //sets the center of the map when marker is clicked\r\n            vm.map.center.latitude = coords.latitude\r\n            vm.map.center.longitude = coords.longitude\r\n\r\n        },\r\n        zoom: 6,\r\n        scrollwheel: true,\r\n    }\r\n    uiGmapGoogleMapApi.then(google => { // when this comes back google maps object is ready with required api key\r\n\r\n        vm.buildMarkerArray = (dataArr, markerArr, idArr) => { //function to build array of markers for each type\r\n            for (let i = 0; i <= 100; i++) {\r\n                markerArr.push(dataArr[i])\r\n                idArr.push(i)\r\n            }\r\n        }\r\n        vm.buildHeatArray = (arr1, arr2) => { //function to build array of heat map points\r\n            for (let i = 0; i < arr1.length; i++) {\r\n                arr2.push(new google.LatLng(arr1[i][1], arr1[i][0]))\r\n            }\r\n        }\r\n        vm.createInfoWindow = (point) => { // creates info window depending on coordinate\r\n            let infowindow = new google.InfoWindow({\r\n                content: `Latitude: ${point.coords.latitude.toFixed(2)} <br> \r\n                          Longitude: ${point.coords.longitude.toFixed(2)}` //info window to display coordinates when clicked on\r\n            })\r\n            return infowindow\r\n        }\r\n        vm.initMap = arr => { // sets up map to show heat with an array of data points passed in\r\n            map = new google.Map(document.getElementById('map2'), {\r\n                zoom: 6,\r\n                center: {  //center points of heat map\r\n                    lat: vm.map.center.latitude,\r\n                    lng: vm.map.center.longitude\r\n                }\r\n            })\r\n            heatmap = new google.visualization.HeatmapLayer({\r\n                data: arr,\r\n                map: map,\r\n            })\r\n        }\r\n\r\n        vm.events = (marker, eventName, model) => {\r\n            let infowindow = vm.createInfoWindow(model) // creates info window depending on coordinate\r\n            infowindow.open(vm.map, marker)   //displays windows on marker click events, shows latitude and longitude of marker\r\n            vm.map.zoom = 18  //sets map zoom on marker click event\r\n            vm.map.setCenter(model.coords) //sets center of map with marker coordinates on click event\r\n        }\r\n\r\n        vm.coinOptions = { //sets coin options in map view\r\n            options: {\r\n                icon: {\r\n                    url: './icons/coin.ico',\r\n                    scaledSize: {  //re-sizes marker icons\r\n                        height: 23,\r\n                        width: 23\r\n                    }\r\n                },\r\n                animation: google.Animation.DROP, // drops markers on map\r\n                title: 'Coin',\r\n                markerEvents: {\r\n                    events: {\r\n                        click: vm.events\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        vm.keyOptions = { //sets key options in map view\r\n            options: {\r\n                icon: {\r\n                    url: './icons/083818-orange-fiesta-icon-business-key9.png',\r\n                    scaledSize: {  //re-sizes marker icons\r\n                        height: 55,\r\n                        width: 55\r\n                    }\r\n                },\r\n                animation: google.Animation.DROP, // drops markers on map\r\n                title: 'Key',\r\n                markerEvents: {\r\n                    events: {\r\n                        click: vm.events\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        vm.cPrizeOptions = {  //sets cinemark prize options in map view\r\n            options: {\r\n                icon: {\r\n                    url: './icons/cinemark.png',\r\n                    scaledSize: {  //re-sizes marker icons\r\n                        height: 30,\r\n                        width: 30\r\n                    }\r\n                },\r\n                animation: google.Animation.DROP, // drops markers on map\r\n                title: 'Cinemark Prize',\r\n                markerEvents: {\r\n                    events: {\r\n                        click: vm.events\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        vm.getCoins = () => { //API call (function definition) for coins\r\n            return $http({\r\n                method: 'GET',\r\n                url: '/api/coins'\r\n            })\r\n        }\r\n        vm.getKey = () => { //API call (function definition) for keys\r\n            return $http({\r\n                method: 'GET',\r\n                url: '/api/keys'\r\n            })\r\n        }\r\n        vm.getCPrize = () => { //API call (function definition) for cinemark prizes\r\n            return $http({\r\n                method: 'GET',\r\n                url: '/api/cprizes'\r\n            })\r\n        }\r\n    })\r\n})\r\n\r\n\r\n\r\n\r\n"]}