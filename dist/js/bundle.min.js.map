{"version":3,"sources":["app.js","components/map.js","services/mainService.js"],"names":[],"mappings":"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","file":"bundle.min.js","sourcesContent":["import config from './../../config';\r\nangular.module('adventure', ['uiGmapgoogle-maps', 'angular-spinkit'])\r\n    .config(['uiGmapGoogleMapApiProvider', function (GoogleMapApi) {\r\n        GoogleMapApi.configure({\r\n            key: config.api_key,\r\n            v: '3.29',\r\n            libraries: 'visualization'\r\n        })\r\n    }])\r\n\r\n\r\n\r\n\r\n\r\n","angular.module('adventure').component('map', {\r\n    templateUrl: './views/map.html',\r\n    controllerAs: 'map',\r\n    controller: function (mainService, uiGmapGoogleMapApi, $timeout) {\r\n        let vm = this,\r\n            newSearch = () => {\r\n                vm.map.setCenter(mainService.map.center) // sets center of map when new search is activated\r\n                vm.map.zoom = 6 // sets zoom of map when new search is activated\r\n            }\r\n        vm.map = mainService.map // initial map to display\r\n        vm.showMap = false // heatmap is not initially shown\r\n        vm.showLoad = false // loading spinner is initially hidden\r\n        vm.menu = mainService.arr //gets select menu options from mainService\r\n\r\n        uiGmapGoogleMapApi.then(res => { // need to wait for the google maps object to come back in mainService\r\n\r\n            let buildMarkerArray = mainService.buildMarkerArray,\r\n                buildHeatArray = mainService.buildHeatArray\r\n            vm.initMap = mainService.initMap // initialize heat map when ready\r\n            vm.coinOptions = mainService.coinOptions\r\n            vm.keyOptions = mainService.keyOptions\r\n            vm.cPrizeOptions = mainService.cPrizeOptions\r\n            vm.select = () => { // function to display marker type depending on selected element\r\n                vm.coinMarkers = [] // array to store coin marker coordinates\r\n                vm.coinId = [] // array to store coin marker ids\r\n                vm.cPointsHeat = [] // array to store coin heat map points\r\n                vm.keyMarkers = [] // array to store key marker coordinates\r\n                vm.keyId = [] // array to store key marker ids\r\n                vm.keyPointsHeat = [] // array to store key heat map points\r\n                vm.cpMarkers = [] // array to store cinemark prize marker coordinates\r\n                vm.cpId = [] // array to store cinemark prize marker ids\r\n                vm.cPrizePointsHeat = [] //array to store cinemark prize heat map points\r\n                vm.showLoad = true // show loading spinner\r\n\r\n                mainService.getAllPrizes().then(res => {  // executes API call to get all prize coordinate data\r\n                    vm.coinPoints = res.data.coinData // arrays from server containing coordinate data\r\n                    vm.keyPoints = res.data.keyData\r\n                    vm.cPrizePoints = res.data.cPrizeData\r\n                    vm.toggleMaps = () => { // function to toggle between showing heat map and point map\r\n                        vm.showMap = !vm.showMap\r\n                        vm.select()  // initiates new API search for coordinates depending on what element is selected\r\n                    }\r\n                    vm.getCoins = () => {\r\n                        $timeout(() => {\r\n                            vm.showLoad = false // 2 seconds after search, loading spinner will be hidden\r\n                            newSearch()\r\n                            buildMarkerArray(vm.coinPoints, vm.coinMarkers, vm.coinId) // builds array of coin coordinates\r\n                            buildHeatArray(vm.coinPoints, vm.cPointsHeat) // builds array of heat map points\r\n                            vm.initMap(vm.cPointsHeat) //initiates heat map\r\n                        }, 2000)\r\n                    }\r\n                    vm.getKeys = () => {\r\n                        $timeout(() => {\r\n                            vm.showLoad = false\r\n                            newSearch()\r\n                            buildMarkerArray(vm.keyPoints, vm.keyMarkers, vm.keyId) //calls function from api component to build array of key coordinates\r\n                            buildHeatArray(vm.keyPoints, vm.keyPointsHeat) //builds array of heat map points\r\n                            vm.initMap(vm.keyPointsHeat) //initiates heat map\r\n                        }, 2000)\r\n                    }\r\n                    vm.getCPrize = () => {\r\n                        $timeout(() => {\r\n                            vm.showLoad = false\r\n                            newSearch()\r\n                            buildMarkerArray(vm.cPrizePoints, vm.cpMarkers, vm.cpId) // builds array of cinemark prize coordinates\r\n                            buildHeatArray(vm.cPrizePoints, vm.cPrizePointsHeat) //builds array of heat map points\r\n                            vm.initMap(vm.cPrizePointsHeat) //initiates heat map\r\n                        }, 2000)\r\n                    }\r\n                    switch (vm.selected) {\r\n                        case 'Coins':\r\n                            vm.getCoins()\r\n                            break\r\n                        case 'Keys':\r\n                            vm.getKeys()\r\n                            break\r\n                        case 'Cinemark Prizes':\r\n                            vm.getCPrize()\r\n                            break\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\n\r\n","angular.module('adventure').service('mainService', function ($http, uiGmapGoogleMapApi) {\r\n    let vm = this, map, heatmap\r\n    vm.arr = ['Coins', 'Keys', 'Cinemark Prizes'] //array for ng-options to display in select menu\r\n    vm.map = {  //defines initial view of map\r\n        center: { // center of map when initially displayed\r\n            latitude: 40.233845,\r\n            longitude: -111.658531\r\n        },\r\n        setCenter: coords => {  //sets the center of the map when marker is clicked\r\n            vm.map.center.latitude = coords.latitude\r\n            vm.map.center.longitude = coords.longitude\r\n\r\n        },\r\n        zoom: 6,\r\n        scrollwheel: true,\r\n    }\r\n    uiGmapGoogleMapApi.then(google => { // when this comes back google maps object is ready with required api key\r\n\r\n        vm.buildMarkerArray = (dataArr, markerArr, idArr) => { //function to build array of markers for each type\r\n            for (let i = 0; i <= 100; i++) {\r\n                markerArr.push(dataArr[i])\r\n                idArr.push(i)\r\n            }\r\n        }\r\n        vm.buildHeatArray = (arr1, arr2) => { //function to build array of heat map points\r\n            for (let i = 0; i < arr1.length; i++) {\r\n                arr2.push(new google.LatLng(arr1[i][1], arr1[i][0]))\r\n            }\r\n        }\r\n        vm.createInfoWindow = (point) => { // creates info window depending on coordinate\r\n            let infowindow = new google.InfoWindow({\r\n                content: `Latitude: ${point.coords.latitude.toFixed(2)} <br> \r\n                          Longitude: ${point.coords.longitude.toFixed(2)}` //info window to display coordinates when clicked on\r\n            })\r\n            return infowindow\r\n        }\r\n        vm.initMap = arr => { // sets up map to show heat with an array of data points passed in\r\n            map = new google.Map(document.getElementById('map2'), {\r\n                zoom: 6,\r\n                center: {  //center points of heat map\r\n                    lat: vm.map.center.latitude,\r\n                    lng: vm.map.center.longitude\r\n                }\r\n            })\r\n            heatmap = new google.visualization.HeatmapLayer({\r\n                data: arr,\r\n                map: map,\r\n            })\r\n        }\r\n\r\n        vm.events = (marker, eventName, model) => {\r\n            let infowindow = vm.createInfoWindow(model) // creates info window depending on coordinate\r\n            infowindow.open(vm.map, marker)   //displays windows on marker click events, shows latitude and longitude of marker\r\n            vm.map.zoom = 18  //sets map zoom on marker click event\r\n            vm.map.setCenter(model.coords) //sets center of map with marker coordinates on click event\r\n        }\r\n\r\n        vm.coinOptions = { //sets coin options in map view\r\n            options: {\r\n                icon: {\r\n                    url: './icons/coin.ico',\r\n                    scaledSize: {  //re-sizes marker icons\r\n                        height: 23,\r\n                        width: 23\r\n                    }\r\n                },\r\n                animation: google.Animation.DROP, // drops markers on map\r\n                title: 'Coin',\r\n                markerEvents: {\r\n                    events: {\r\n                        click: vm.events\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        vm.keyOptions = { //sets key options in map view\r\n            options: {\r\n                icon: {\r\n                    url: './icons/083818-orange-fiesta-icon-business-key9.png',\r\n                    scaledSize: {  //re-sizes marker icons\r\n                        height: 55,\r\n                        width: 55\r\n                    }\r\n                },\r\n                animation: google.Animation.DROP, // drops markers on map\r\n                title: 'Key',\r\n                markerEvents: {\r\n                    events: {\r\n                        click: vm.events\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        vm.cPrizeOptions = {  //sets cinemark prize options in map view\r\n            options: {\r\n                icon: {\r\n                    url: './icons/cinemark.png',\r\n                    scaledSize: {  //re-sizes marker icons\r\n                        height: 30,\r\n                        width: 30\r\n                    }\r\n                },\r\n                animation: google.Animation.DROP, // drops markers on map\r\n                title: 'Cinemark Prize',\r\n                markerEvents: {\r\n                    events: {\r\n                        click: vm.events\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        vm.getAllPrizes = () => { //API call (function definition) for all prizes\r\n            return $http({\r\n                method: 'GET',\r\n                url: '/api/allprizes'\r\n            })\r\n        }\r\n    })\r\n})\r\n\r\n\r\n\r\n\r\n"]}