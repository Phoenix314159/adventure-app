{"version":3,"sources":["app.js","components/map.js","services/mainService.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_config2","obj","__esModule","default","angular","config","GoogleMapApi","configure","key","api_key","v","libraries","./../../config","2","Object","defineProperty","value","component","templateUrl","controllerAs","controller","mainService","uiGmapGoogleMapApi","$timeout","vm","this","newSearch","map","setCenter","center","zoom","showMap","showLoad","menu","arr","then","res","buildMarkerArray","buildHeatArray","initMap","coinOptions","keyOptions","cPrizeOptions","select","coinMarkers","coinId","cPointsHeat","keyMarkers","keyId","keyPointsHeat","cpMarkers","cpId","cPrizePointsHeat","getAllPrizes","coinPoints","data","coinData","keyPoints","keyData","cPrizePoints","cPrizeData","toggleMaps","getCoins","getKeys","getCPrize","selected","service","$http","heatmap","latitude","longitude","coords","scrollwheel","google","dataArr","markerArr","idArr","push","arr1","arr2","LatLng","createInfoWindow","point","InfoWindow","content","toFixed","Map","document","getElementById","lat","lng","visualization","HeatmapLayer","events","marker","eventName","model","open","options","icon","url","scaledSize","height","width","animation","Animation","DROP","title","markerEvents","click","method"],"mappings":"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","file":"bundle.min.js","sourcesContent":["import config from './../../config';\r\nangular.module('adventure', ['uiGmapgoogle-maps', 'angular-spinkit'])\r\n    .config(['uiGmapGoogleMapApiProvider', function (GoogleMapApi) {\r\n        GoogleMapApi.configure({\r\n            key: config.api_key,\r\n            v: '3.29',\r\n            libraries: 'visualization'\r\n        })\r\n    }])\r\n\r\n\r\n\r\n\r\n\r\n","angular.module('adventure').component('map', {\r\n    templateUrl: './views/map.html',\r\n    controllerAs: 'map',\r\n    controller: function (mainService, uiGmapGoogleMapApi, $timeout) {\r\n        let vm = this,\r\n            newSearch = () => {\r\n                vm.map.setCenter(mainService.map.center) // sets center of map when new search is activated\r\n                vm.map.zoom = 6 // sets zoom of map when new search is activated\r\n            }\r\n        vm.map = mainService.map // initial map to display\r\n        vm.showMap = false // heatmap is not initially shown\r\n        vm.showLoad = false // loading spinner is initially hidden\r\n        vm.menu = mainService.arr //gets select menu options from mainService\r\n\r\n        uiGmapGoogleMapApi.then(res => { // need to wait for the google maps object to come back in mainService\r\n\r\n            let buildMarkerArray = mainService.buildMarkerArray,\r\n                buildHeatArray = mainService.buildHeatArray\r\n            vm.initMap = mainService.initMap // initialize heat map when ready\r\n            vm.coinOptions = mainService.coinOptions\r\n            vm.keyOptions = mainService.keyOptions\r\n            vm.cPrizeOptions = mainService.cPrizeOptions\r\n            vm.select = () => { // function to display marker type depending on selected element\r\n                vm.coinMarkers = [] // array to store coin marker coordinates\r\n                vm.coinId = [] // array to store coin marker ids\r\n                vm.cPointsHeat = [] // array to store coin heat map points\r\n                vm.keyMarkers = [] // array to store key marker coordinates\r\n                vm.keyId = [] // array to store key marker ids\r\n                vm.keyPointsHeat = [] // array to store key heat map points\r\n                vm.cpMarkers = [] // array to store cinemark prize marker coordinates\r\n                vm.cpId = [] // array to store cinemark prize marker ids\r\n                vm.cPrizePointsHeat = [] //array to store cinemark prize heat map points\r\n                vm.showLoad = true // show loading spinner\r\n\r\n                mainService.getAllPrizes().then(res => {  // executes API call to get all prize coordinate data\r\n                    vm.coinPoints = res.data.coinData // arrays from server containing coordinate data\r\n                    vm.keyPoints = res.data.keyData\r\n                    vm.cPrizePoints = res.data.cPrizeData\r\n                    vm.toggleMaps = () => { // function to toggle between showing heat map and point map\r\n                        vm.showMap = !vm.showMap\r\n                        vm.select()  // initiates new API search for coordinates depending on what element is selected\r\n                    }\r\n                    vm.getCoins = () => {\r\n                        $timeout(() => {\r\n                            vm.showLoad = false // 2 seconds after search, loading spinner will be hidden\r\n                            newSearch()\r\n                            buildMarkerArray(vm.coinPoints, vm.coinMarkers, vm.coinId) // builds array of coin coordinates\r\n                            buildHeatArray(vm.coinPoints, vm.cPointsHeat) // builds array of heat map points\r\n                            vm.initMap(vm.cPointsHeat) //initiates heat map\r\n                        }, 2000)\r\n                    }\r\n                    vm.getKeys = () => {\r\n                        $timeout(() => {\r\n                            vm.showLoad = false\r\n                            newSearch()\r\n                            buildMarkerArray(vm.keyPoints, vm.keyMarkers, vm.keyId) //calls function from api component to build array of key coordinates\r\n                            buildHeatArray(vm.keyPoints, vm.keyPointsHeat) //builds array of heat map points\r\n                            vm.initMap(vm.keyPointsHeat) //initiates heat map\r\n                        }, 2000)\r\n                    }\r\n                    vm.getCPrize = () => {\r\n                        $timeout(() => {\r\n                            vm.showLoad = false\r\n                            newSearch()\r\n                            buildMarkerArray(vm.cPrizePoints, vm.cpMarkers, vm.cpId) // builds array of cinemark prize coordinates\r\n                            buildHeatArray(vm.cPrizePoints, vm.cPrizePointsHeat) //builds array of heat map points\r\n                            vm.initMap(vm.cPrizePointsHeat) //initiates heat map\r\n                        }, 2000)\r\n                    }\r\n                    switch (vm.selected) {\r\n                        case 'Coins':\r\n                            vm.getCoins()\r\n                            break\r\n                        case 'Keys':\r\n                            vm.getKeys()\r\n                            break\r\n                        case 'Cinemark Prizes':\r\n                            vm.getCPrize()\r\n                            break\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\n\r\n","angular.module('adventure').service('mainService', function ($http, uiGmapGoogleMapApi) {\r\n    let vm = this, map, heatmap\r\n    vm.arr = ['Coins', 'Keys', 'Cinemark Prizes'] //array for ng-options to display in select menu\r\n    vm.map = {  //defines initial view of map\r\n        center: { // center of map when initially displayed\r\n            latitude: 40.233845,\r\n            longitude: -111.658531\r\n        },\r\n        setCenter: coords => {  //sets the center of the map when marker is clicked\r\n            vm.map.center.latitude = coords.latitude\r\n            vm.map.center.longitude = coords.longitude\r\n\r\n        },\r\n        zoom: 6,\r\n        scrollwheel: true,\r\n    }\r\n    uiGmapGoogleMapApi.then(google => { // when this comes back google maps object is ready with required api key\r\n\r\n        vm.buildMarkerArray = (dataArr, markerArr, idArr) => { //function to build array of markers for each type\r\n            for (let i = 0; i <= 100; i++) {\r\n                markerArr.push(dataArr[i])\r\n                idArr.push(i)\r\n            }\r\n        }\r\n        vm.buildHeatArray = (arr1, arr2) => { //function to build array of heat map points\r\n            for (let i = 0; i < arr1.length; i++) {\r\n                arr2.push(new google.LatLng(arr1[i][1], arr1[i][0]))\r\n            }\r\n        }\r\n        vm.createInfoWindow = (point) => { // creates info window depending on coordinate\r\n            let infowindow = new google.InfoWindow({\r\n                content: `Latitude: ${point.coords.latitude.toFixed(2)} <br> \r\n                          Longitude: ${point.coords.longitude.toFixed(2)}` //info window to display coordinates when clicked on\r\n            })\r\n            return infowindow\r\n        }\r\n        vm.initMap = arr => { // sets up map to show heat with an array of data points passed in\r\n            map = new google.Map(document.getElementById('map2'), {\r\n                zoom: 6,\r\n                center: {  //center points of heat map\r\n                    lat: vm.map.center.latitude,\r\n                    lng: vm.map.center.longitude\r\n                }\r\n            })\r\n            heatmap = new google.visualization.HeatmapLayer({\r\n                data: arr,\r\n                map: map,\r\n            })\r\n        }\r\n\r\n        vm.events = (marker, eventName, model) => {\r\n            let infowindow = vm.createInfoWindow(model) // creates info window depending on coordinate\r\n            infowindow.open(vm.map, marker)   //displays windows on marker click events, shows latitude and longitude of marker\r\n            vm.map.zoom = 18  //sets map zoom on marker click event\r\n            vm.map.setCenter(model.coords) //sets center of map with marker coordinates on click event\r\n        }\r\n\r\n        vm.coinOptions = { //sets coin options in map view\r\n            options: {\r\n                icon: {\r\n                    url: './icons/coin.ico',\r\n                    scaledSize: {  //re-sizes marker icons\r\n                        height: 23,\r\n                        width: 23\r\n                    }\r\n                },\r\n                animation: google.Animation.DROP, // drops markers on map\r\n                title: 'Coin',\r\n                markerEvents: {\r\n                    events: {\r\n                        click: vm.events\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        vm.keyOptions = { //sets key options in map view\r\n            options: {\r\n                icon: {\r\n                    url: './icons/083818-orange-fiesta-icon-business-key9.png',\r\n                    scaledSize: {  //re-sizes marker icons\r\n                        height: 55,\r\n                        width: 55\r\n                    }\r\n                },\r\n                animation: google.Animation.DROP, // drops markers on map\r\n                title: 'Key',\r\n                markerEvents: {\r\n                    events: {\r\n                        click: vm.events\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        vm.cPrizeOptions = {  //sets cinemark prize options in map view\r\n            options: {\r\n                icon: {\r\n                    url: './icons/cinemark.png',\r\n                    scaledSize: {  //re-sizes marker icons\r\n                        height: 30,\r\n                        width: 30\r\n                    }\r\n                },\r\n                animation: google.Animation.DROP, // drops markers on map\r\n                title: 'Cinemark Prize',\r\n                markerEvents: {\r\n                    events: {\r\n                        click: vm.events\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        vm.getAllPrizes = () => { //API call (function definition) for all prizes\r\n            return $http({\r\n                method: 'GET',\r\n                url: '/api/allprizes'\r\n            })\r\n        }\r\n    })\r\n})\r\n\r\n\r\n\r\n\r\n"]}