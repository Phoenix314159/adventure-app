{"version":3,"sources":["app.js","components/map.js","services/mainService.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_config2","obj","__esModule","default","angular","config","GoogleMapApi","api_key","configure","key","v","libraries","./../../config","2","Object","defineProperty","value","component","templateUrl","controllerAs","controller","mainService","uiGmapGoogleMapApi","$timeout","vm","this","newSearch","map","setCenter","center","zoom","showMap","showLoad","menu","arr","toggleMaps","select","then","res","buildMarkerArray","buildHeatArray","initMap","coinOptions","keyOptions","cPrizeOptions","selected","getCoins","getKeys","getCPrize","coinMarkers","coinId","cPointsHeat","coinPoints","data","keyMarkers","keyId","keyPointsHeat","getKey","keyPoints","cpMarkers","cpId","cPrizePointsHeat","cPrizePoints","service","$http","heatmap","latitude","longitude","coords","scrollwheel","google","dataArr","markerArr","idArr","push","arr1","arr2","LatLng","createInfoWindow","point","InfoWindow","content","toFixed","Map","document","getElementById","lat","lng","visualization","HeatmapLayer","events","marker","eventName","model","open","options","icon","url","scaledSize","height","width","animation","Animation","DROP","title","markerEvents","click","method"],"mappings":"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","file":"bundle.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _config = require('./../../config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nangular.module('adventure', ['uiGmapgoogle-maps', 'angular-spinkit']).config(['uiGmapGoogleMapApiProvider', function (GoogleMapApi) {\n    var api_key = _config2.default.api_key;\n    GoogleMapApi.configure({\n        key: api_key,\n        v: '3.29',\n        libraries: 'visualization'\n    });\n}]);\n\n},{\"./../../config\":2}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar config = {\n    api_key: 'AIzaSyAb3rsRQDgM-q4MSYsK7KCm0nclohzKhF4'\n};\nexports.default = config;\n\n},{}]},{},[1]);\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nangular.module('adventure').component('map', {\n    templateUrl: './views/map.html',\n    controllerAs: 'map',\n    controller: function controller(mainService, uiGmapGoogleMapApi, $timeout) {\n        var vm = this,\n            newSearch = function newSearch() {\n            vm.map.setCenter(mainService.map.center); // sets center of map when new search is activated\n            vm.map.zoom = 6; // sets zoom of map when new search is activated\n        };\n        vm.map = mainService.map; // initial map to display\n        vm.showMap = false; // heatmap is not initially shown\n        vm.showLoad = false; // loading spinner is initially hidden\n        vm.menu = mainService.arr; //gets select menu options from mainService\n        vm.toggleMaps = function () {\n            // function to toggle between showing heat map and point map\n            vm.showMap = !vm.showMap;\n            vm.select(); // initiates new API search for coordinates depending on what element is selected\n        };\n\n        uiGmapGoogleMapApi.then(function (res) {\n            // need to wait for the google maps object to come back in mainService\n            var buildMarkerArray = mainService.buildMarkerArray,\n                buildHeatArray = mainService.buildHeatArray;\n            vm.initMap = mainService.initMap;\n            vm.coinOptions = mainService.coinOptions;\n            vm.keyOptions = mainService.keyOptions;\n            vm.cPrizeOptions = mainService.cPrizeOptions;\n            vm.select = function () {\n                // function to display marker type depending on selected element\n                switch (vm.selected) {\n                    case 'Coins':\n                        vm.getCoins();\n                        break;\n                    case 'Keys':\n                        vm.getKeys();\n                        break;\n                    case 'Cinemark Prizes':\n                        vm.getCPrize();\n                        break;\n                }\n            };\n            vm.getCoins = function () {\n                vm.coinMarkers = []; // array to store marker coordinates\n                vm.coinId = []; // every marker needs a unique id\n                vm.cPointsHeat = []; // array to store heat map points\n                vm.showLoad = true; // show loading spinner for 3 seconds\n                newSearch(); // initiate new search\n                mainService.getCoins().then(function (res) {\n                    // executes API call to get coin coordinate data\n                    vm.coinPoints = res.data; // array from server containing coin coordinate data\n                    $timeout(function () {\n                        // show loading spinner for 3 seconds until points drop\n                        vm.showLoad = false;\n                        buildMarkerArray(vm.coinPoints, vm.coinMarkers, vm.coinId); // builds array of coin coordinates\n                        buildHeatArray(vm.coinPoints, vm.cPointsHeat); // builds array of heat map points\n                        vm.initMap(vm.cPointsHeat); //initiates heat map\n                    }, 2000);\n                });\n            };\n            vm.getKeys = function () {\n                vm.keyMarkers = []; // array to store marker coordinates\n                vm.keyId = []; // every marker needs a unique id\n                vm.keyPointsHeat = []; // array to store heat map points\n                vm.showLoad = true; // show loading spinner\n                newSearch(); // initiate new search\n                mainService.getKey().then(function (res) {\n                    // executes API call to get key coordinate data\n                    vm.keyPoints = res.data; // array from server containing key coordinate data\n                    $timeout(function () {\n                        // show loading spinner for 3 seconds until points drop\n                        vm.showLoad = false;\n                        buildMarkerArray(vm.keyPoints, vm.keyMarkers, vm.keyId); //calls function from api component to build array of key coordinates\n                        buildHeatArray(vm.keyPoints, vm.keyPointsHeat); //builds array of heat map points\n                        vm.initMap(vm.keyPointsHeat); //initiates heat map\n                    }, 2000);\n                });\n            };\n            vm.getCPrize = function () {\n                vm.cpMarkers = []; // array to store marker coordinates\n                vm.cpId = []; // every marker needs a unique id\n                vm.cPrizePointsHeat = []; //array to store heat map points\n                vm.showLoad = true; // show loading spinner\n                newSearch(); // initiate new search\n                mainService.getCPrize().then(function (res) {\n                    //executes API call to get cinemark prize coordinate data\n                    vm.cPrizePoints = res.data; // array from server containing cinemark prize coordinate data\n                    $timeout(function () {\n                        // show loading spinner for 3 seconds until points drop\n                        vm.showLoad = false;\n                        buildMarkerArray(vm.cPrizePoints, vm.cpMarkers, vm.cpId); // builds array of cinemark prize coordinates\n                        buildHeatArray(vm.cPrizePoints, vm.cPrizePointsHeat); //builds array of heat map points\n                        vm.initMap(vm.cPrizePointsHeat); //initiates heat map\n                    }, 2000);\n                });\n            };\n        });\n    }\n});\n\n},{}]},{},[1]);\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nangular.module('adventure').service('mainService', function ($http, uiGmapGoogleMapApi) {\n    var vm = this,\n        map = void 0,\n        heatmap = void 0;\n    vm.arr = ['Coins', 'Keys', 'Cinemark Prizes']; //array for ng-options to display in select menu\n    vm.map = { //defines initial view of map\n        center: { // center of map when initially displayed\n            latitude: 40.233845,\n            longitude: -111.658531\n        },\n        setCenter: function setCenter(coords) {\n            //sets the center of the map when marker is clicked\n            vm.map.center.latitude = coords.latitude;\n            vm.map.center.longitude = coords.longitude;\n        },\n        zoom: 6,\n        scrollwheel: true\n    };\n    uiGmapGoogleMapApi.then(function (google) {\n        // when this comes back google maps object is ready with required api key\n\n        vm.buildMarkerArray = function (dataArr, markerArr, idArr) {\n            //function to build array of markers for each type\n            for (var i = 0; i <= 100; i++) {\n                markerArr.push(dataArr[i]);\n                idArr.push(i);\n            }\n        };\n        vm.buildHeatArray = function (arr1, arr2) {\n            //function to build array of heat map points\n            for (var i = 0; i < arr1.length; i++) {\n                arr2.push(new google.LatLng(arr1[i][1], arr1[i][0]));\n            }\n        };\n        vm.createInfoWindow = function (point) {\n            // creates info window depending on coordinate\n            var infowindow = new google.InfoWindow({\n                content: 'Latitude: ' + point.coords.latitude.toFixed(2) + ' <br> \\n                          Longitude: ' + point.coords.longitude.toFixed(2) //info window to display coordinates when clicked on\n            });\n            return infowindow;\n        };\n        vm.initMap = function (arr) {\n            // sets up map to show heat with an array of data points passed in\n            map = new google.Map(document.getElementById('map2'), {\n                zoom: 6,\n                center: { //center points of heat map\n                    lat: vm.map.center.latitude,\n                    lng: vm.map.center.longitude\n                }\n            });\n            heatmap = new google.visualization.HeatmapLayer({\n                data: arr,\n                map: map\n            });\n        };\n\n        vm.events = function (marker, eventName, model) {\n            var infowindow = vm.createInfoWindow(model); // creates info window depending on coordinate\n            infowindow.open(vm.map, marker); //displays windows on marker click events, shows latitude and longitude of marker\n            vm.map.zoom = 18; //sets map zoom on marker click event\n            vm.map.setCenter(model.coords); //sets center of map with marker coordinates on click event\n        };\n\n        vm.coinOptions = { //sets coin options in map view\n            options: {\n                icon: {\n                    url: './icons/coin.ico',\n                    scaledSize: { //re-sizes marker icons\n                        height: 23,\n                        width: 23\n                    }\n                },\n                animation: google.Animation.DROP, // drops markers on map\n                title: 'Coin',\n                markerEvents: {\n                    events: {\n                        click: vm.events\n                    }\n                }\n            }\n        };\n        vm.keyOptions = { //sets key options in map view\n            options: {\n                icon: {\n                    url: './icons/083818-orange-fiesta-icon-business-key9.png',\n                    scaledSize: { //re-sizes marker icons\n                        height: 55,\n                        width: 55\n                    }\n                },\n                animation: google.Animation.DROP, // drops markers on map\n                title: 'Key',\n                markerEvents: {\n                    events: {\n                        click: vm.events\n                    }\n                }\n            }\n        };\n        vm.cPrizeOptions = { //sets cinemark prize options in map view\n            options: {\n                icon: {\n                    url: './icons/cinemark.png',\n                    scaledSize: { //re-sizes marker icons\n                        height: 30,\n                        width: 30\n                    }\n                },\n                animation: google.Animation.DROP, // drops markers on map\n                title: 'Cinemark Prize',\n                markerEvents: {\n                    events: {\n                        click: vm.events\n                    }\n                }\n            }\n        };\n        vm.getCoins = function () {\n            //API call (function definition) for coins\n            return $http({\n                method: 'GET',\n                url: '/api/coins'\n            });\n        };\n        vm.getKey = function () {\n            //API call (function definition) for keys\n            return $http({\n                method: 'GET',\n                url: '/api/keys'\n            });\n        };\n        vm.getCPrize = function () {\n            //API call (function definition) for cinemark prizes\n            return $http({\n                method: 'GET',\n                url: '/api/cprizes'\n            });\n        };\n    });\n});\n\n},{}]},{},[1]);\n"]}