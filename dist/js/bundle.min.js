(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _config = require('./../../config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

angular.module('adventure', ['uiGmapgoogle-maps', 'angular-spinkit']).config(['uiGmapGoogleMapApiProvider', function (GoogleMapApi) {
    GoogleMapApi.configure({
        key: _config2.default.api_key,
        v: '3.29',
        libraries: 'visualization'
    });
}]);

},{"./../../config":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var config = {
    api_key: 'AIzaSyAb3rsRQDgM-q4MSYsK7KCm0nclohzKhF4'
};
exports.default = config;

},{}]},{},[1]);

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

angular.module('adventure').component('map', {
    templateUrl: './views/map.html',
    controllerAs: 'map',
    controller: ["mainService", "uiGmapGoogleMapApi", "$timeout", function controller(mainService, uiGmapGoogleMapApi, $timeout) {
        var vm = this,
            newSearch = function newSearch() {
            vm.map.setCenter(mainService.map.center); // sets center of map when new search is activated
            vm.map.zoom = 6; // sets zoom of map when new search is activated
        };
        vm.map = mainService.map; // initial map to display
        vm.showMap = false; // heatmap is not initially shown
        vm.showLoad = false; // loading spinner is initially hidden
        vm.menu = mainService.arr; //gets select menu options from mainService

        uiGmapGoogleMapApi.then(function (res) {
            // need to wait for the google maps object to come back in mainService

            var buildMarkerArray = mainService.buildMarkerArray,
                buildHeatArray = mainService.buildHeatArray;
            vm.initMap = mainService.initMap; // initialize heat map when ready
            vm.coinOptions = mainService.coinOptions;
            vm.keyOptions = mainService.keyOptions;
            vm.cPrizeOptions = mainService.cPrizeOptions;
            vm.select = function () {
                // function to display marker type depending on selected element
                vm.coinMarkers = []; // array to store coin marker coordinates
                vm.coinId = []; // array to store coin marker ids
                vm.cPointsHeat = []; // array to store coin heat map points
                vm.keyMarkers = []; // array to store key marker coordinates
                vm.keyId = []; // array to store key marker ids
                vm.keyPointsHeat = []; // array to store key heat map points
                vm.cpMarkers = []; // array to store cinemark prize marker coordinates
                vm.cpId = []; // array to store cinemark prize marker ids
                vm.cPrizePointsHeat = []; //array to store cinemark prize heat map points
                vm.showLoad = true; // show loading spinner

                mainService.getAllPrizes().then(function (res) {
                    // executes API call to get all prize coordinate data
                    vm.coinPoints = res.data.coinData; // arrays from server containing coordinate data
                    vm.keyPoints = res.data.keyData;
                    vm.cPrizePoints = res.data.cPrizeData;
                    vm.toggleMaps = function () {
                        // function to toggle between showing heat map and point map
                        vm.showMap = !vm.showMap;
                        vm.select(); // initiates new API search for coordinates depending on what element is selected
                    };
                    vm.getCoins = function () {
                        $timeout(function () {
                            vm.showLoad = false; // 2 seconds after search, loading spinner will be hidden
                            newSearch();
                            buildMarkerArray(vm.coinPoints, vm.coinMarkers, vm.coinId); // builds array of coin coordinates
                            buildHeatArray(vm.coinPoints, vm.cPointsHeat); // builds array of heat map points
                            vm.initMap(vm.cPointsHeat); //initiates heat map
                        }, 2000);
                    };
                    vm.getKeys = function () {
                        $timeout(function () {
                            vm.showLoad = false;
                            newSearch();
                            buildMarkerArray(vm.keyPoints, vm.keyMarkers, vm.keyId); //calls function from api component to build array of key coordinates
                            buildHeatArray(vm.keyPoints, vm.keyPointsHeat); //builds array of heat map points
                            vm.initMap(vm.keyPointsHeat); //initiates heat map
                        }, 2000);
                    };
                    vm.getCPrize = function () {
                        $timeout(function () {
                            vm.showLoad = false;
                            newSearch();
                            buildMarkerArray(vm.cPrizePoints, vm.cpMarkers, vm.cpId); // builds array of cinemark prize coordinates
                            buildHeatArray(vm.cPrizePoints, vm.cPrizePointsHeat); //builds array of heat map points
                            vm.initMap(vm.cPrizePointsHeat); //initiates heat map
                        }, 2000);
                    };
                    switch (vm.selected) {
                        case 'Coins':
                            vm.getCoins();
                            break;
                        case 'Keys':
                            vm.getKeys();
                            break;
                        case 'Cinemark Prizes':
                            vm.getCPrize();
                            break;
                    }
                });
            };
        });
    }]
});

},{}]},{},[1]);

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

angular.module('adventure').service('mainService', ["$http", "uiGmapGoogleMapApi", function ($http, uiGmapGoogleMapApi) {
    var vm = this,
        map = void 0,
        heatmap = void 0;
    vm.arr = ['Coins', 'Keys', 'Cinemark Prizes']; //array for ng-options to display in select menu
    vm.map = { //defines initial view of map
        center: { // center of map when initially displayed
            latitude: 40.233845,
            longitude: -111.658531
        },
        setCenter: function setCenter(coords) {
            //sets the center of the map when marker is clicked
            vm.map.center.latitude = coords.latitude;
            vm.map.center.longitude = coords.longitude;
        },
        zoom: 6,
        scrollwheel: true
    };
    uiGmapGoogleMapApi.then(function (google) {
        // when this comes back google maps object is ready with required api key

        vm.buildMarkerArray = function (dataArr, markerArr, idArr) {
            //function to build array of markers for each type
            for (var i = 0; i <= 100; i++) {
                markerArr.push(dataArr[i]);
                idArr.push(i);
            }
        };
        vm.buildHeatArray = function (arr1, arr2) {
            //function to build array of heat map points
            for (var i = 0; i < arr1.length; i++) {
                arr2.push(new google.LatLng(arr1[i][1], arr1[i][0]));
            }
        };
        vm.createInfoWindow = function (point) {
            // creates info window depending on coordinate
            var infowindow = new google.InfoWindow({
                content: 'Latitude: ' + point.coords.latitude.toFixed(2) + ' <br> \n                          Longitude: ' + point.coords.longitude.toFixed(2) //info window to display coordinates when clicked on
            });
            return infowindow;
        };
        vm.initMap = function (arr) {
            // sets up map to show heat with an array of data points passed in
            map = new google.Map(document.getElementById('map2'), {
                zoom: 6,
                center: { //center points of heat map
                    lat: vm.map.center.latitude,
                    lng: vm.map.center.longitude
                }
            });
            heatmap = new google.visualization.HeatmapLayer({
                data: arr,
                map: map
            });
        };

        vm.events = function (marker, eventName, model) {
            var infowindow = vm.createInfoWindow(model); // creates info window depending on coordinate
            infowindow.open(vm.map, marker); //displays windows on marker click events, shows latitude and longitude of marker
            vm.map.zoom = 18; //sets map zoom on marker click event
            vm.map.setCenter(model.coords); //sets center of map with marker coordinates on click event
        };

        vm.coinOptions = { //sets coin options in map view
            options: {
                icon: {
                    url: './icons/coin.ico',
                    scaledSize: { //re-sizes marker icons
                        height: 23,
                        width: 23
                    }
                },
                animation: google.Animation.DROP, // drops markers on map
                title: 'Coin',
                markerEvents: {
                    events: {
                        click: vm.events
                    }
                }
            }
        };
        vm.keyOptions = { //sets key options in map view
            options: {
                icon: {
                    url: './icons/083818-orange-fiesta-icon-business-key9.png',
                    scaledSize: { //re-sizes marker icons
                        height: 55,
                        width: 55
                    }
                },
                animation: google.Animation.DROP, // drops markers on map
                title: 'Key',
                markerEvents: {
                    events: {
                        click: vm.events
                    }
                }
            }
        };
        vm.cPrizeOptions = { //sets cinemark prize options in map view
            options: {
                icon: {
                    url: './icons/cinemark.png',
                    scaledSize: { //re-sizes marker icons
                        height: 30,
                        width: 30
                    }
                },
                animation: google.Animation.DROP, // drops markers on map
                title: 'Cinemark Prize',
                markerEvents: {
                    events: {
                        click: vm.events
                    }
                }
            }
        };
        vm.getAllPrizes = function () {
            //API call (function definition) for all prizes
            return $http({
                method: 'GET',
                url: '/api/allprizes'
            });
        };
    });
}]);

},{}]},{},[1]);

//# sourceMappingURL=bundle.min.js.map
